#Sliding window approach and a map to maintain and update the indexes of characters in the string




class Solution {
public:
    
    int lengthOfLongestSubstring(string s) {
        queue<int>q;
        if(s.length()==0)
            return 0;
        if(s.length()==1)
            return 1;
        map<char,int>pos;
        pos[s[0]] = 0;
        q.push(0);
        cout<<q.size();
        int i=1;
        int len = 0;
        int maxlen = 0;
        while(i<s.length())
        {
            if(pos.find(s[i]) == pos.end())
            {
                  q.push(i);
                pos[s[i]] = i;
                int qsize = q.size();
                maxlen = max(maxlen,qsize);
            }
            else
            {
                len = q.size();
                if(pos[s[i]] >= q.front())
                {
                    while(!q.empty() && pos[s[i]] != q.front())
                        q.pop();
                    if(!q.empty())
                        q.pop();
                    
                }
                int qsize = q.size();
                maxlen = max(maxlen,qsize);
                q.push(i);
                pos[s[i]] = i;
                    // i++;
                int q1size = q.size();
                maxlen = max(maxlen,q1size);
                // maxlen = max(maxlen,len);
            }
            
            i++;
        }
        return maxlen;
    }
};
