#DFS APPROACH 
#note: do not use visited array - (memory limit exceeded)


class Solution {
public:
    bool dfs(int i, int j, vector<vector<char>>& board, string& word)
    {
        if(!word.length())
            return true;
        if(i<0 || i>=board.size() || j<0 || j>=board[0].size() || board[i][j] != word[0])
            return false;
        char c = board[i][j];
        board[i][j] = '*';
        string s = word.substr(1);
        bool res = dfs(i,j+1,board,s) || dfs(i-1,j,board,s) || dfs(i,j-1,board,s) || dfs(i+1,j,board,s);
        board[i][j] = c;
        return res;
    }
    
    
    bool exist(vector<vector<char>>& board, string word) {
        int n = board.size();
        int m = board[0].size();
        for(int i=0;i<n;i++)
        {
            for(int j =0;j<m;j++)
            {
                if(dfs(i,j,board,word))
                    return true;
            }
        }
        return false;
    }
};
