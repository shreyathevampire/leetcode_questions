class Solution {
public:
    vector<vector<string>> groupAnagrams(vector<string>& strs) {
        map<string,vector<string>>res;
        vector<vector<string>>finalres;
        vector<string>t;
        string r ; 
        for(int i=0;i<strs.size();i++)
        {
            r = strs[i];
            sort(r.begin(),r.end());
           
            if(res.find(r) == res.end())
            {
                vector<string>temp;
                temp.push_back(strs[i]);
                res.insert(make_pair(r,temp));
            }
            else
            {
                t = res[r];
                t.push_back(strs[i]);
                res[r] = t;
            }
        }
        string f;
        for(auto it = res.begin() ; it != res.end() ;it++)
        {
            f = it->first;
            t = res[f];
            finalres.push_back(t);
        }
        return finalres;
    }
};

/*
(can be done better)

Runtime: 56 ms, faster than 29.85% of C++ online submissions for Group Anagrams.
Memory Usage: 19.9 MB, less than 59.70% of C++ online submissions for Group Anagrams.



Complexity Analysis:

Time Complexity: O(NKlogK), where NN is the length of strs, and K is the maximum length of a string in strs.
The outer loop has complexity O(N) as we iterate through each string. 
Then, we sort each string in O(KlogK) time.

Space Complexity: O(NK), the total information content stored in ans.
*/
