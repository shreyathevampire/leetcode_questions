class Solution {
public:
    bool isSafe(int a, int b, int m)
    {
        if(a>=0 && a<m && b>=0 && b<m)
            return true;
        return false;
    }
    int minimum(int a, int b, int c)
    {
        int m = min(a,b);
        return(min(m,c));
    }
     
    void printArr(vector<vector<int>>& A)
    {
        for(int i=0;i<A.size();i++)
        {
            for(int j=0;j<A[0].size();j++)
                cout<<A[i][j]<<" ";
            cout<<endl;
        }
    }
    int minFallingPathSum(vector<vector<int>>& A) {
        int n = A.size();
        int m = A[0].size();
        vector<vector<int>>vals(n, vector<int>(m,0));
        for(int i=0;i<n;i++)
        {
            for(int j=0;j<m;j++)
            {
                vals[i][j] = 0;
            }
        }
        for(int j=0;j<m;j++)
            vals[n-1][j] = A[n-1][j];
       
        int temp,temp2;
        for(int i=n-2;i>=0;i--)
        {
            for(int j=0;j<m;j++)
            {
                if(j-1>=0 && j-1<m)
                    temp = vals[i+1][j-1];
                else
                    temp=INT_MAX;
                if(j+1>=0 && j+1<m)
                    temp2 = vals[i+1][j+1];
                else
                    temp2 = INT_MAX;
                vals[i][j]= A[i][j] + minimum(temp,vals[i+1][j],temp2);
                // cout<<temp<<" "<<vals[i+1][j]<<" "<<temp2<<endl;
            }
        }
        
        int mini = vals[0][0];
        for(int j=1;j<m;j++)
        {
            if(vals[0][j]<mini)
                mini = vals[0][j];
        }
        
        printArr(vals);
        return mini;
    }
};
